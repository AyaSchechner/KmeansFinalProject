# define PY_SSIZE_T_CLEAN
# include <Python.h>
# include <stdio.h>
# include <stdlib.h>
# include <math.h>
# include "symnmf.h"


/* symnmf wrap function */
static PyObject* symnmf(PyObject *self, PyObject *args){
    PyObject *lst1;
    PyObject *lst2;
    PyObject *curr_vec;
    PyObject *answer;
    double** H;
    double** norm_mat;
    double** final_H;
    int vec_num;
    int k;
    int i;
    int j;
    int p;

    if(!PyArg_ParseTuple(args, "iiOO", &vec_num, &k,  &lst1, &lst2)) {  /* transfer python variables to C*/
        return NULL;
    }

    /* create vectors matrix */
    H = create_mat(vec_num, k);
    if(H == NULL) {
        return NULL;
    }

    norm_mat = create_mat(vec_num, vec_num);
    if(norm_mat == NULL) {
        return NULL;
    }


    for (j = 0; j < vec_num; ++j) {
        curr_vec = PyList_GetItem(lst1, j);
        for (p = 0; p < k; ++p){
            H[j][p] = PyFloat_AsDouble(PyList_GetItem(curr_vec, p));
        }
    }

    for (j = 0; j < vec_num; ++j) {
        curr_vec = PyList_GetItem(lst2, j);
        for (p = 0; p < vec_num; ++p){
            norm_mat[j][p] = PyFloat_AsDouble(PyList_GetItem(curr_vec, p));
        }
    }

    final_H = finalmat(H, norm_mat, vec_num, k);


    /* transfer C final values to Python values*/
    answer = PyList_New(vec_num);
    for (i = 0; i < vec_num; ++i){
        curr_vec = PyList_New(k);
        for (j = 0; j < k; ++j) {
            PyList_SetItem(curr_vec, j, Py_BuildValue("d", final_H[i][j]));
        }
        PyList_SetItem(answer, i, curr_vec);
    }

    free_mat(H, vec_num);
    free_mat(final_H, vec_num);
    free_mat(norm_mat, vec_num);
    return answer;

}


/* sym wrap function */
static PyObject* sym(PyObject *self, PyObject *args){
    PyObject *lst1;
    PyObject *answer;
    PyObject *curr_vec;
    double** vectors_mat;
    double** similarity_mat;
    int vec_num;
    int vec_len;
    int i;
    int j;
    int p;

    if(!PyArg_ParseTuple(args, "iiO", &vec_len, &vec_num, &lst1)) {  /* transfer python variables to C*/
        return NULL;
    }

    /* create vectors matrix */
    vectors_mat = create_mat(vec_num, vec_len);

    if(vectors_mat == NULL) {
        return NULL;
    }


    for (j = 0; j < vec_num; ++j) {
        curr_vec = PyList_GetItem(lst1, j);
        for (p = 0; p < vec_len; ++p){
            vectors_mat[j][p] = PyFloat_AsDouble(PyList_GetItem(curr_vec, p));
        }
    }

    similarity_mat = symmat(vectors_mat, vec_num, vec_len);

    /* transfer C final values to Python values*/
    answer = PyList_New(vec_num);
    for (i = 0; i < vec_num; ++i){
        curr_vec = PyList_New(vec_num);
        for (j = 0; j < vec_num; ++j) {
            PyList_SetItem(curr_vec, j, Py_BuildValue("d", similarity_mat[i][j]));
        }
        PyList_SetItem(answer, i, curr_vec);
    }
    free_mat(similarity_mat, vec_num);
    free_mat(vectors_mat, vec_num);
    return answer;
}


/* ddg wrap function */
static PyObject* ddg(PyObject *self, PyObject *args){
    PyObject *lst1;
    PyObject *answer;
    PyObject *curr_vec;
    double** vectors_mat;
    double** diagonal_mat;
    int vec_num;
    int vec_len;
    int i;
    int j;
    int p;

    if(!PyArg_ParseTuple(args, "iiO", &vec_len, &vec_num, &lst1)) {  /* transfer python variables to C*/
        return NULL;
    }

    /* create vectors matrix */
    vectors_mat = create_mat(vec_num, vec_len);

    if(vectors_mat == NULL) {
        return NULL;
    }


    for (j = 0; j < vec_num; ++j) {
        curr_vec = PyList_GetItem(lst1, j);
        for (p = 0; p < vec_len; ++p){
            vectors_mat[j][p] = PyFloat_AsDouble(PyList_GetItem(curr_vec, p));
        }
    }

    diagonal_mat = ddgmat(vectors_mat, vec_num, vec_len);

    /* transfer C final values to Python values*/
    answer = PyList_New(vec_num);
    for (i = 0; i < vec_num; ++i){
        curr_vec = PyList_New(vec_num);
        for (j = 0; j < vec_num; ++j) {
            PyList_SetItem(curr_vec, j, Py_BuildValue("d", diagonal_mat[i][j]));
        }
        PyList_SetItem(answer, i, curr_vec);
    }
    free_mat(diagonal_mat, vec_num);
    free_mat(vectors_mat, vec_num);
    return answer;
}


/* norm wrap function */
static PyObject* norm(PyObject *self, PyObject *args){
    PyObject *lst1;
    PyObject *answer;
    PyObject *curr_vec;
    double** vectors_mat;
    double** norm_mat;
    int vec_num;
    int vec_len;
    int i;
    int j;
    int p;

    if(!PyArg_ParseTuple(args, "iiO", &vec_len, &vec_num, &lst1)) {  /* transfer python variables to C*/
        return NULL;
    }

    /* create vectors matrix */
    vectors_mat = create_mat(vec_num, vec_len);

    if(vectors_mat == NULL) {
        return NULL;
    }


    for (j = 0; j < vec_num; ++j) {
        curr_vec = PyList_GetItem(lst1, j);
        for (p = 0; p < vec_len; ++p){
            vectors_mat[j][p] = PyFloat_AsDouble(PyList_GetItem(curr_vec, p));
        }
    }

    norm_mat = normmat(vectors_mat, vec_num, vec_len);

    /* transfer C final values to Python values*/
    answer = PyList_New(vec_num);
    for (i = 0; i < vec_num; ++i){
        curr_vec = PyList_New(vec_num);
        for (j = 0; j < vec_num; ++j) {
            PyList_SetItem(curr_vec, j, Py_BuildValue("d", norm_mat[i][j]));
        }
        PyList_SetItem(answer, i, curr_vec);
    }
    free_mat(norm_mat, vec_num);
    free_mat(vectors_mat, vec_num);
    return answer;
}


static PyMethodDef symnmfMethods[] = {{"symnmf", (PyCFunction) symnmf, METH_VARARGS, PyDoc_STR("function expects: number of vectors, number of clusters, the initialized H, W")},
                                      {"sym", (PyCFunction) sym, METH_VARARGS, PyDoc_STR("function expects: vector's dimension, number of vectors, vectors matrix")},
                                      {"ddg", (PyCFunction) ddg, METH_VARARGS, PyDoc_STR("function expects: vector's dimension, number of vectors, vectors matrix")},
                                      {"norm", (PyCFunction) norm, METH_VARARGS, PyDoc_STR("function expects: vector's dimension, number of vectors, vectors matrix")},
                                      {NULL,NULL,0,NULL}};


static struct PyModuleDef symnmfmodule = {
        PyModuleDef_HEAD_INIT,
        "mysymnmfsp", /* name of module */
        NULL, /* module documentation, may be NULL */
        -1,  /* size of per-interpreter state of the module, or -1 if the module keeps state in global variables. */
        symnmfMethods /* the PyMethodDef array from before containing the methods of the extension */
};

PyMODINIT_FUNC PyInit_mysymnmfsp(void)
{
    PyObject *m;
    m = PyModule_Create(&symnmfmodule);
    if (!m) {
        Py_RETURN_NONE;
    }
    return m;
}
